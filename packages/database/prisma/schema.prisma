// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Color {
  Cheater
  Gray
  Blue
  Green
  Orange
  Red
  Purple
}

model User {
  id        Int      @id
  updatedAt DateTime @updatedAt

  userSnapshots UserSnapshot[]

  activities     Activity[]
  paste          Paste[]
  judgements     Judgement[]
  postSnapshots  PostSnapshot[]
  replySnapshots ReplySnapshot[]

  postTakedowns     PostTakedown[]
  replyTakedowns    ReplyTakedown[]
  activityTakedowns ActivityTakedown[]
}

model Forum {
  slug         String         @id
  name         String
  PostSnapshot PostSnapshot[]
}

model Post {
  id         Int            @id
  time       DateTime       @db.Timestamp(0)
  snapshots  PostSnapshot[]
  replyCount Int
  replies    Reply[]

  takedown PostTakedown?

  @@index([time])
  @@index([replyCount(sort: Desc)])
}

model Reply {
  id Int @id

  post   Post @relation(fields: [postId], references: [id])
  postId Int

  time DateTime @db.Timestamp(0)

  snapshots ReplySnapshot[]
  takedown  ReplyTakedown?

  @@index([postId])
  @@index([time])
}

model Activity {
  id      Int      @id
  type    Int
  time    DateTime @db.Timestamp(0)
  user    User     @relation(fields: [userId], references: [id])
  userId  Int
  content String

  ActivityTakedown ActivityTakedown[]
}

model Paste {
  id   String   @id @db.Char(8)
  time DateTime @db.Timestamp(0)

  user      User            @relation(fields: [userId], references: [id])
  userId    Int
  snapshots PasteSnapshot[]

  @@index([userId])
}

model Judgement {
  time DateTime @db.Timestamp(0)

  user   User @relation(fields: [userId], references: [id])
  userId Int

  reason            String
  permissionGranted Int
  permissionRevoked Int

  @@id([time, userId])
  @@index([time(sort: Desc)])
  @@index([userId])
}

model UserSnapshot {
  user   User @relation(fields: [userId], references: [id])
  userId Int

  name  String
  badge String?

  isAdmin  Boolean
  isBanned Boolean
  isRoot   Boolean?

  color    Color
  ccfLevel Int

  until DateTime @updatedAt
  time  DateTime @default(now())

  @@id([userId, time])
  @@index([userId])
  @@index([userId, time(sort: Desc)])
}

model PostSnapshot {
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  time      DateTime @default(now())
  until     DateTime @updatedAt
  title     String
  forum     Forum    @relation(fields: [forumSlug], references: [slug])
  forumSlug String

  content String @db.Text

  @@id([postId, time])
  @@index([postId])
  @@index([authorId])
  @@index([postId, time(sort: Desc)])
}

model ReplySnapshot {
  reply   Reply @relation(fields: [replyId], references: [id])
  replyId Int

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  time    DateTime @default(now())
  until   DateTime @updatedAt
  content String   @db.Text

  @@id([replyId, time])
  @@index([replyId])
  @@index([authorId])
  @@index([replyId, time(sort: Desc)])
}

model PasteSnapshot {
  paste   Paste  @relation(fields: [pasteId], references: [id])
  pasteId String @db.Char(8)

  time   DateTime @default(now())
  until  DateTime @updatedAt
  public Boolean
  data   String?

  @@id([pasteId, time])
  @@index([pasteId, time(sort: Desc)])
}

model PostTakedown {
  post   Post @relation(fields: [postId], references: [id])
  postId Int  @id

  submitter   User @relation(fields: [submitterId], references: [id])
  submitterId Int

  reason String
}

model ReplyTakedown {
  reply   Reply @relation(fields: [replyId], references: [id])
  replyId Int   @id

  submitter   User @relation(fields: [submitterId], references: [id])
  submitterId Int

  reason String
}

model ActivityTakedown {
  activity   Activity @relation(fields: [activityId], references: [id])
  activityId Int      @id

  submitter   User @relation(fields: [submitterId], references: [id])
  submitterId Int

  reason String
}
